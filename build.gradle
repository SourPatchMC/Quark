plugins {
    id 'org.quiltmc.loom' version '1.+'
    id 'maven-publish'
}

version = mod_version
group = maven_group
archivesBaseName = archives_base_name

repositories {
    maven { url = "https://maven.quiltmc.org/repository/release" } // Quilt, Quilt Mappings
    maven { url = 'https://maven.parchmentmc.org' } // Parchment Mappings
    maven { url = "https://mvn.devos.one/snapshots/" } // Porting Lib, AutoRegLib Port
    maven { url = "https://jitpack.io/" } // Mixin Extras
    maven { url = "https://maven.terraformersmc.com/" } // EMI
    maven { url = 'https://maven.minecraftforge.net/' } // TerraBlender
}

dependencies {
    minecraft "com.mojang:minecraft:${minecraft_version}" // Minecraft
    mappings(loom.layered { // Mappings
        it.mappings("org.quiltmc:quilt-mappings:${minecraft_version}+build.${qm_version}:intermediary-v2")
        it.parchment("org.parchmentmc.data:parchment-${minecraft_version}:${parchment_version}@zip")
        it.officialMojangMappings { nameSyntheticMembers = false }
    })

    modImplementation "org.quiltmc:quilt-loader:${quilt_loader_version}"

    modImplementation "org.quiltmc.quilted-fabric-api:quilted-fabric-api:${qfapi_version}-${minecraft_version}"

    modImplementation(include("io.github.fabricators_of_create.Porting-Lib:Porting-Lib:${porting_lib_version}"))

    modImplementation "vazkii.autoreglib:AutoRegLib-${minecraft_version}:${autoreglib_version}"

    modImplementation "com.github.glitchfiend:TerraBlender-fabric:${minecraft_version}-${terrablender_version}"

    modImplementation include("com.github.LlamaLad7:MixinExtras:0.1.1")
    annotationProcessor "com.github.LlamaLad7:MixinExtras:0.1.1"

    modImplementation "dev.emi:emi-fabric:${emi_version}" // EMI

}

configurations.configureEach {
    exclude(group: "net.fabricmc", module: "fabric-loader")
    exclude(group: "net.fabricmc.fabric-api")
}

sourceSets {
    main {
        resources {
            srcDir("src/generated/resources")
            exclude("src/generated/resources/.cache")
        }
    }
}

loom {
    accessWidenerPath = file("src/main/resources/quark.accesswidener")

    runs {
        datagen {
            client()

            name "Data Generation"
            vmArg "-Dfabric-api.datagen"
            vmArg "-Dfabric-api.datagen.output-dir=${file("src/generated/resources")}"
            vmArg "-Dfabric-api.datagen.modid=quark"
            vmArg "-Dporting_lib.datagen.existing_resources=${file("src/main/resources")}"
        }

        server {
            runDir "run/server"
        }
    }
}

processResources {
    Map<String, Object> properties = [
            "version": version,
            "minecraft_version": minecraft_version,
            "loader_version": quilt_loader_version
    ]
    properties.forEach((k, v) -> inputs.property(k, v))

    filesMatching("quilt.mod.json") {
        expand properties
    }
}

def targetJavaVersion = 17
tasks.withType(JavaCompile).configureEach {
    it.options.encoding = "UTF-8"
    if (targetJavaVersion >= 10 || JavaVersion.current().isJava10Compatible()) {
        it.options.release = targetJavaVersion
    }
}

java {
    def javaVersion = JavaVersion.toVersion(targetJavaVersion)
    if (JavaVersion.current() < javaVersion) {
        toolchain.languageVersion = JavaLanguageVersion.of(targetJavaVersion)
    }
    archivesBaseName = archives_base_name
    withSourcesJar()
}

jar {
    from("LICENSE") {
        rename { "${it}_${archivesBaseName}"}
    }
}